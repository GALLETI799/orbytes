// Status command - Fake system diagnostic with S.L.O.P CORP chaos
const { EmbedBuilder } = require('discord.js');

const statuses = [
    'CRITICAL', 'WARNING', 'NOMINAL', 'ERROR', 'UNKNOWN', 'CONCERNING', 'OPTIMAL*', 'DECLINING'
];

const departments = [
    'Dimensional Research',
    'Anomaly Containment',
    'Coffee Machine Relations',
    'Existential Crisis Management',
    'Paperwork Sentience Division',
    'Time Paradox Prevention',
    'Employee Sanity Monitoring',
    'Interdimensional Mail Room',
    'Reality Stability Control',
    'Sentient AI Complaints Dept'
];

const incidents = [
    'Lab rats teaching calculus to interns',
    'Elevator stuck between floors 3 and purple',
    'Jenkins still missing in Dimension 7',
    'Coffee machine demanding healthcare benefits',
    'Stapler gained consciousness and filed union complaint',
    'Break room microwave creating pocket dimensions',
    'Someone left the reality stabilizer on "wobbly" setting',
    'Dr. [REDACTED] accidentally became a houseplant again',
    'Containment breach in the "Definitely Not Dangerous" wing',
    'Time loop in Conference Room B (stuck on minute 47 of meeting)',
    'The printer is now telepathic and judging our life choices',
    'Vending machine E-4 achieved sentience and is depressed'
];

function getRandomStatus() {
    return statuses[Math.floor(Math.random() * statuses.length)];
}

function getRandomIncident() {
    return incidents[Math.floor(Math.random() * incidents.length)];
}

function generateSystemReport() {
    const report = [];
    const numDepartments = Math.floor(Math.random() * 6) + 4;
    const selectedDepartments = [...departments].sort(() => 0.5 - Math.random()).slice(0, numDepartments);
    
    selectedDepartments.forEach(dept => {
        const status = getRandomStatus();
        const emoji = status === 'NOMINAL' || status === 'OPTIMAL*' ? '‚úÖ' : 
                     status === 'WARNING' || status === 'CONCERNING' ? '‚ö†Ô∏è' : '‚ùå';
        report.push(`${emoji} **${dept}:** ${status}`);
    });
    
    return report;
}

module.exports = {
    name: 'status',
    aliases: ['diagnostic', 'systems', 'sitrep'],
    description: 'Check S.L.O.P CORP\'s current operational status (spoiler: it\'s probably bad)',
    usage: 'status',
    category: 'S.L.O.P CORP',
    cooldown: 10,
    
    async execute(message, args, client) {
        try {
            const systemReport = generateSystemReport();
            const currentIncident = getRandomIncident();
            const overallStatus = getRandomStatus();
            const threatLevel = ['GREEN', 'YELLOW', 'ORANGE', 'RED', 'PLAID'][Math.floor(Math.random() * 5)];
            
            const embed = new EmbedBuilder()
                .setColor(overallStatus === 'NOMINAL' ? '#00ff00' : 
                         overallStatus === 'WARNING' ? '#ffff00' : '#ff0000')
                .setTitle('üñ•Ô∏è S.L.O.P CORP System Diagnostic Report')
                .setDescription('*Automated diagnostic report generated by definitely-not-malfunctioning AI*')
                .addFields(
                    {
                        name: 'üìä Overall Status',
                        value: `**${overallStatus}** (Translation: We're probably doomed)`,
                        inline: true
                    },
                    {
                        name: 'üö® Threat Level',
                        value: `**${threatLevel}** ${threatLevel === 'PLAID' ? '(Yes, that\'s worse than red)' : ''}`,
                        inline: true
                    },
                    {
                        name: '‚è∞ System Uptime',
                        value: `${Math.floor(Math.random() * 100)} days, ${Math.floor(Math.random() * 24)} hours, ${Math.floor(Math.random() * 60)} minutes\n*(Since last existential crisis)*`,
                        inline: true
                    },
                    {
                        name: 'üè¢ Departmental Status',
                        value: systemReport.join('\n'),
                        inline: false
                    },
                    {
                        name: 'üî• Current Incident',
                        value: `${currentIncident}`,
                        inline: false
                    },
                    {
                        name: 'üìà Today\'s Statistics',
                        value: [
                            `‚Ä¢ **Containment Breaches:** ${Math.floor(Math.random() * 20)}`,
                            `‚Ä¢ **Coffee Consumed:** ${Math.floor(Math.random() * 500)} gallons`,
                            `‚Ä¢ **Reality Distortions:** ${Math.floor(Math.random() * 15)}`,
                            `‚Ä¢ **Employee Sanity:** ${Math.floor(Math.random() * 30)}%`,
                            `‚Ä¢ **Success Rate:** ${Math.floor(Math.random() * 10)}%`
                        ].join('\n'),
                        inline: true
                    },
                    {
                        name: '‚ö° System Alerts',
                        value: [
                            '‚Ä¢ Backup generator running on hamster power',
                            '‚Ä¢ AI assistant experiencing existential dread',
                            '‚Ä¢ Dimension 4 slightly off-center',
                            '‚Ä¢ Someone left their lunch in the time machine again'
                        ].join('\n'),
                        inline: true
                    }
                )
                .setFooter({ 
                    text: `Report #${Math.floor(Math.random() * 10000)} | Generated at ${new Date().toLocaleTimeString()} | S.L.O.P CORP‚Ñ¢`, 
                    iconURL: client.user.displayAvatarURL() 
                })
                .setTimestamp();
            
            await message.reply({ embeds: [embed] });
            
        } catch (error) {
            console.error('Error in status command:', error);
            await message.reply('üí• System diagnostic failed. Ironically, this perfectly represents our current operational status.');
        }
    }
};